app bsk {
  wasp: {
    version: "^0.11.4"
  },
  title: "bsk",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int     @id @default(autoincrement())
    username String  @unique
    password String
    entries  Entry[]
psl=}

entity Entry {=psl
    id            Int      @id @default(autoincrement())
    itemNumber    String
    itemName      String
    account       String
    accountNumber String
    caseStack     Boolean
    caseDrop      Boolean
    btg           Boolean
    usagePerMonth Int
    startDate     DateTime
    endDate       DateTime
    salesRepName  String
    area          String
    user          User     @relation(fields: [userId], references: [id])
    userId        Int
psl=}

action createEntry {
  fn: import { createEntry } from "@server/actions.js",
  entities: [Entry]
}

query getEntries {
  fn: import { getEntries } from "@server/queries.js",
  entities: [Entry]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { Dashboard } from "@client/pages/Dashboard.jsx",
  authRequired: true
}